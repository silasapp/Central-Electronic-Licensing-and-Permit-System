<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ELPS</name>
    </assembly>
    <members>
        <member name="M:ELPS.App_Start.NinjectWebCommon.Start">
            <summary>
            Starts the application
            </summary>
        </member>
        <member name="M:ELPS.App_Start.NinjectWebCommon.Stop">
            <summary>
            Stops the application.
            </summary>
        </member>
        <member name="M:ELPS.App_Start.NinjectWebCommon.CreateKernel">
            <summary>
            Creates the kernel that will manage your application.
            </summary>
            <returns>The created kernel.</returns>
        </member>
        <member name="M:ELPS.App_Start.NinjectWebCommon.RegisterServices(Ninject.IKernel)">
            <summary>
            Load your modules or register your services here!
            </summary>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="M:ELPS.Areas.HelpPage.ApiDescriptionExtensions.GetFriendlyId(System.Web.Http.Description.ApiDescription)">
            <summary>
            Generates an URI-friendly ID for the <see cref="T:System.Web.Http.Description.ApiDescription"/>. E.g. "Get-Values-id_name" instead of "GetValues/{id}?name={name}"
            </summary>
            <param name="description">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The ID as a string.</returns>
        </member>
        <member name="T:ELPS.Areas.HelpPage.HelpPageConfig">
            <summary>
            Use this class to customize the Help Page.
            For example you can set a custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> to supply the documentation
            or you can provide the samples for the requests/responses.
            </summary>
        </member>
        <member name="T:ELPS.Areas.HelpPage.Controllers.HelpController">
            <summary>
            The controller that will handle requests for the help page.
            </summary>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageConfigurationExtensions.SetDocumentationProvider(System.Web.Http.HttpConfiguration,System.Web.Http.Description.IDocumentationProvider)">
            <summary>
            Sets the documentation provider for help page.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="documentationProvider">The documentation provider.</param>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleObjects(System.Web.Http.HttpConfiguration,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Sets the objects that will be used by the formatters to produce sample requests/responses.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleObjects">The sample objects.</param>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type and action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample request directly for the specified media type and action with parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type of the action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample response directly for the specified media type of the action with specific parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForMediaType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Sets the sample directly for all actions with the specified media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Sets the sample directly for all actions with the specified type and media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
            <param name="type">The parameter type or return type of an action.</param>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <returns>The help page sample generator.</returns>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageConfigurationExtensions.SetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration,ELPS.Areas.HelpPage.HelpPageSampleGenerator)">
            <summary>
            Sets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleGenerator">The help page sample generator.</param>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageConfigurationExtensions.GetModelDescriptionGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the model description generator.
            </summary>
            <param name="config">The configuration.</param>
            <returns>The <see cref="T:ELPS.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator"/></returns>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageApiModel(System.Web.Http.HttpConfiguration,System.String)">
            <summary>
            Gets the model that represents an API displayed on the help page. The model is initialized on the first call and cached for subsequent calls.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="apiDescriptionId">The <see cref="T:System.Web.Http.Description.ApiDescription"/> ID.</param>
            <returns>
            An <see cref="T:ELPS.Areas.HelpPage.Models.HelpPageApiModel"/>
            </returns>
        </member>
        <member name="T:ELPS.Areas.HelpPage.ModelDescriptions.ModelDescription">
            <summary>
            Describes a type model.
            </summary>
        </member>
        <member name="T:ELPS.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator">
            <summary>
            Generates model descriptions for given types.
            </summary>
        </member>
        <member name="T:ELPS.Areas.HelpPage.ModelDescriptions.ModelNameAttribute">
            <summary>
            Use this attribute to change the name of the <see cref="T:ELPS.Areas.HelpPage.ModelDescriptions.ModelDescription"/> generated for a type.
            </summary>
        </member>
        <member name="T:ELPS.Areas.HelpPage.Models.HelpPageApiModel">
            <summary>
            The model that represents an API displayed on the help page.
            </summary>
        </member>
        <member name="M:ELPS.Areas.HelpPage.Models.HelpPageApiModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ELPS.Areas.HelpPage.Models.HelpPageApiModel"/> class.
            </summary>
        </member>
        <member name="P:ELPS.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription">
            <summary>
            Gets or sets the <see cref="P:ELPS.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription"/> that describes the API.
            </summary>
        </member>
        <member name="P:ELPS.Areas.HelpPage.Models.HelpPageApiModel.UriParameters">
            <summary>
            Gets or sets the <see cref="T:ELPS.Areas.HelpPage.ModelDescriptions.ParameterDescription"/> collection that describes the URI parameters for the API.
            </summary>
        </member>
        <member name="P:ELPS.Areas.HelpPage.Models.HelpPageApiModel.RequestDocumentation">
            <summary>
            Gets or sets the documentation for the request.
            </summary>
        </member>
        <member name="P:ELPS.Areas.HelpPage.Models.HelpPageApiModel.RequestModelDescription">
            <summary>
            Gets or sets the <see cref="T:ELPS.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the request body.
            </summary>
        </member>
        <member name="P:ELPS.Areas.HelpPage.Models.HelpPageApiModel.RequestBodyParameters">
            <summary>
            Gets the request body parameter descriptions.
            </summary>
        </member>
        <member name="P:ELPS.Areas.HelpPage.Models.HelpPageApiModel.ResourceDescription">
            <summary>
            Gets or sets the <see cref="T:ELPS.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the resource.
            </summary>
        </member>
        <member name="P:ELPS.Areas.HelpPage.Models.HelpPageApiModel.ResourceProperties">
            <summary>
            Gets the resource property descriptions.
            </summary>
        </member>
        <member name="P:ELPS.Areas.HelpPage.Models.HelpPageApiModel.SampleRequests">
            <summary>
            Gets the sample requests associated with the API.
            </summary>
        </member>
        <member name="P:ELPS.Areas.HelpPage.Models.HelpPageApiModel.SampleResponses">
            <summary>
            Gets the sample responses associated with the API.
            </summary>
        </member>
        <member name="P:ELPS.Areas.HelpPage.Models.HelpPageApiModel.ErrorMessages">
            <summary>
            Gets the error messages associated with this model.
            </summary>
        </member>
        <member name="T:ELPS.Areas.HelpPage.HelpPageSampleGenerator">
            <summary>
            This class will generate the samples for the help page.
            </summary>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageSampleGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ELPS.Areas.HelpPage.HelpPageSampleGenerator"/> class.
            </summary>
        </member>
        <member name="P:ELPS.Areas.HelpPage.HelpPageSampleGenerator.ActualHttpMessageTypes">
            <summary>
            Gets CLR types that are used as the content of <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="P:ELPS.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples">
            <summary>
            Gets the objects that are used directly as samples for certain actions.
            </summary>
        </member>
        <member name="P:ELPS.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects">
            <summary>
            Gets the objects that are serialized as samples by the supported formatters.
            </summary>
        </member>
        <member name="P:ELPS.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories">
            <summary>
            Gets factories for the objects that the supported formatters will serialize as samples. Processed in order,
            stopping when the factory successfully returns a non-<see langref="null"/> object.
            </summary>
            <remarks>
            Collection includes just <see cref="M:ELPS.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)"/> initially. Use
            <code>SampleObjectFactories.Insert(0, func)</code> to provide an override and
            <code>SampleObjectFactories.Add(func)</code> to provide a fallback.</remarks>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageSampleGenerator.GetSampleRequests(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the request body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageSampleGenerator.GetSampleResponses(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the response body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageSampleGenerator.GetSample(System.Web.Http.Description.ApiDescription,ELPS.Areas.HelpPage.SampleDirection)">
            <summary>
            Gets the request or response body samples.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageSampleGenerator.GetActionSample(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Type,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,ELPS.Areas.HelpPage.SampleDirection)">
            <summary>
            Search for samples that are provided directly through <see cref="P:ELPS.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="type">The CLR type.</param>
            <param name="formatter">The formatter.</param>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The sample that matches the parameters.</returns>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageSampleGenerator.GetSampleObject(System.Type)">
            <summary>
            Gets the sample object that will be serialized by the formatters. 
            First, it will look at the <see cref="P:ELPS.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects"/>. If no sample object is found, it will try to create
            one using <see cref="M:ELPS.Areas.HelpPage.HelpPageSampleGenerator.DefaultSampleObjectFactory(ELPS.Areas.HelpPage.HelpPageSampleGenerator,System.Type)"/> (which wraps an <see cref="T:ELPS.Areas.HelpPage.ObjectGenerator"/>) and other
            factories in <see cref="P:ELPS.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The sample object.</returns>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageSampleGenerator.ResolveHttpRequestMessageType(System.Web.Http.Description.ApiDescription)">
            <summary>
            Resolves the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageSampleGenerator.ResolveType(System.Web.Http.Description.ApiDescription,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},ELPS.Areas.HelpPage.SampleDirection,System.Collections.ObjectModel.Collection{System.Net.Http.Formatting.MediaTypeFormatter}@)">
            <summary>
            Resolves the type of the action parameter or return value when <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/> is used.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or a response.</param>
            <param name="formatters">The formatters.</param>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageSampleGenerator.WriteSampleObjectUsingFormatter(System.Net.Http.Formatting.MediaTypeFormatter,System.Object,System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Writes the sample object using formatter.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="T:ELPS.Areas.HelpPage.HelpPageSampleKey">
            <summary>
            This is used to identify the place where the sample should be applied.
            </summary>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Creates a new <see cref="T:ELPS.Areas.HelpPage.HelpPageSampleKey"/> based on media type.
            </summary>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Creates a new <see cref="T:ELPS.Areas.HelpPage.HelpPageSampleKey"/> based on media type and CLR type.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="type">The CLR type.</param>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageSampleKey.#ctor(ELPS.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:ELPS.Areas.HelpPage.HelpPageSampleKey"/> based on <see cref="P:ELPS.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="sampleDirection">The <see cref="P:ELPS.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:ELPS.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,ELPS.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:ELPS.Areas.HelpPage.HelpPageSampleKey"/> based on media type, <see cref="P:ELPS.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The <see cref="P:ELPS.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="P:ELPS.Areas.HelpPage.HelpPageSampleKey.ControllerName">
            <summary>
            Gets the name of the controller.
            </summary>
            <value>
            The name of the controller.
            </value>
        </member>
        <member name="P:ELPS.Areas.HelpPage.HelpPageSampleKey.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>
            The name of the action.
            </value>
        </member>
        <member name="P:ELPS.Areas.HelpPage.HelpPageSampleKey.MediaType">
            <summary>
            Gets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="P:ELPS.Areas.HelpPage.HelpPageSampleKey.ParameterNames">
            <summary>
            Gets the parameter names.
            </summary>
        </member>
        <member name="P:ELPS.Areas.HelpPage.HelpPageSampleKey.SampleDirection">
            <summary>
            Gets the <see cref="P:ELPS.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.
            </summary>
        </member>
        <member name="T:ELPS.Areas.HelpPage.ImageSample">
            <summary>
            This represents an image sample on the help page. There's a display template named ImageSample associated with this class.
            </summary>
        </member>
        <member name="M:ELPS.Areas.HelpPage.ImageSample.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ELPS.Areas.HelpPage.ImageSample"/> class.
            </summary>
            <param name="src">The URL of an image.</param>
        </member>
        <member name="T:ELPS.Areas.HelpPage.InvalidSample">
            <summary>
            This represents an invalid sample on the help page. There's a display template named InvalidSample associated with this class.
            </summary>
        </member>
        <member name="T:ELPS.Areas.HelpPage.ObjectGenerator">
            <summary>
            This class will create an object of a given type and populate it with sample data.
            </summary>
        </member>
        <member name="M:ELPS.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)">
            <summary>
            Generates an object for a given type. The type needs to be public, have a public default constructor and settable public properties/fields. Currently it supports the following types:
            Simple types: <see cref="T:System.Int32"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Uri"/>, etc.
            Complex types: POCO types.
            Nullables: <see cref="T:System.Nullable`1"/>.
            Arrays: arrays of simple types or complex types.
            Key value pairs: <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            Tuples: <see cref="T:System.Tuple`1"/>, <see cref="T:System.Tuple`2"/>, etc
            Dictionaries: <see cref="T:System.Collections.Generic.IDictionary`2"/> or anything deriving from <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            Collections: <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.IList"/>, <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.ICollection"/> or anything deriving from <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.IList"/>.
            Queryables: <see cref="T:System.Linq.IQueryable"/>, <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>An object of the given type.</returns>
        </member>
        <member name="T:ELPS.Areas.HelpPage.SampleDirection">
            <summary>
            Indicates whether the sample is used for request or response
            </summary>
        </member>
        <member name="T:ELPS.Areas.HelpPage.TextSample">
            <summary>
            This represents a preformatted text sample on the help page. There's a display template named TextSample associated with this class.
            </summary>
        </member>
        <member name="T:ELPS.Areas.HelpPage.XmlDocumentationProvider">
            <summary>
            A custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> that reads the API documentation from an XML documentation file.
            </summary>
        </member>
        <member name="M:ELPS.Areas.HelpPage.XmlDocumentationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ELPS.Areas.HelpPage.XmlDocumentationProvider"/> class.
            </summary>
            <param name="documentPath">The physical path to XML document.</param>
        </member>
        <member name="M:ELPS.Controllers.AccountController.ResetPasswordToken(System.String,System.String,System.String)">
            <summary>
            Called from Child Portals to Reset password
            </summary>
            <param name="Email"></param>
            <param name="email"></param>
            <param name="apiHash"></param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.AddressesController.GetAddress(System.Int32,System.String,System.String)">
            <summary>
            Get a company's addresss
            </summary>
            <param name="CompId">Company Id</param>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(Licen) secrete Key</param>
            <returns>Returns a list of Adresses that Belongs to this Company. both the regitared and Operational Address</returns>
        </member>
        <member name="M:ELPS.Controllers.AddressesController.GetAddressById(System.Int32,System.String,System.String)">
            <summary>
            Get a particular addresss by the Address Id
            </summary>
            <param name="Id">Address Id</param>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(Licen) secrete Key</param>
            <returns>Returns the Address model</returns>
        </member>
        <member name="M:ELPS.Controllers.AddressesController.GetstatesById(System.Int32,System.String,System.String)">
            <summary>
            get states by country Id
            </summary>
            <param name="Id"> this is the Country Id</param>
            <param name="email">app(Solution Email Id)</param>
            <param name="apiHash">SHA512 hash of emailAppId</param>
            <returns>Returns a list of the states that belongs to a Country </returns>
        </member>
        <member name="M:ELPS.Controllers.AddressesController.PostAddress(System.Int32,System.String,System.String,System.Collections.Generic.List{ELPS.Domain.Entities.Address})">
            <summary>
            Posting a company list of Address
            </summary>
            <param name="CompId">Company Id</param>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(Licen) secrete Key</param>
            <param name="Adds">this is List of Address Model that is being saved</param>
            <returns>Return List of Address Model that has been saved</returns>
        </member>
        <member name="M:ELPS.Controllers.AddressesController.PutAddress(System.String,System.String,System.Collections.Generic.List{ELPS.Domain.Entities.Address})">
            <summary>
            Update a company list of Address
            </summary>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(License) secrete Key</param>
            <param name="Adds">This is List of Address Model that is being Updated</param>
            <returns>Return List of Address Model that has been Updated. Please Note:
            that if the Address is not found, we will use the Model and Create a new address</returns>
        </member>
        <member name="M:ELPS.Controllers.ApplicationsController.GetApplication(System.Int32,System.String,System.String)">
            <summary>
            Get a company's list of applications
            </summary>
            <param name="CompId">Company Id</param>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(Licen) secrete Key</param>
            <returns>Returns a list of applications that Belongs to this Company. </returns>
        </member>
        <member name="M:ELPS.Controllers.ApplicationsController.GetApplication(System.String,System.String,System.String)">
            <summary>
            Get a Particular Application by application orderId
            </summary>
            <param name="orderId">Application orderId</param>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(Licen) secrete Key</param>
            <returns>returns Application Details</returns>
        </member>
        <member name="M:ELPS.Controllers.ApplicationsController.PutApplication(System.String,System.String,ELPS.Domain.Entities.Application)">
            <summary>
            To Update a Particular Application
            </summary>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(Licen) secrete Key</param>
            <param name="model">Application Object to be Updated</param>
            <returns>Returns the Updated Application Details</returns>
        </member>
        <member name="M:ELPS.Controllers.BranchesController.GetAllBranches(System.String,System.String)">
            <summary>
            Gets All Branches on the Portal
            </summary>
            <param name="email"></param>
            <param name="apiHash"></param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.#ctor(ELPS.Domain.Abstract.ICompanyRepository,ELPS.Domain.Abstract.IAppIdentityRepository,ELPS.Domain.Abstract.ICompany_NsitfRepository,ELPS.Domain.Abstract.IAffiliateRepository,ELPS.Domain.Abstract.ICompany_MedicalRepository,ELPS.Domain.Abstract.ICompany_ProffessionalRepository,ELPS.Domain.Abstract.ICompany_Technical_AgreementRepository,ELPS.Domain.Abstract.ICompany_Expatriate_QuotaRepository,ELPS.Domain.Abstract.IFileRepository,ELPS.Domain.Abstract.ICompany_DocumentRepository,ELPS.Domain.Abstract.IvFacilityFileRepository,ELPS.Domain.Abstract.IvCompanyDirectorRepository,ELPS.Domain.Abstract.IvCompanyExpatriateQuotaRepository,ELPS.Domain.Abstract.IvCompanyMedicalRepository,ELPS.Domain.Abstract.IvCompanyNsitfRepository,ELPS.Domain.Abstract.IvCompanyProffessionalRepository,ELPS.Domain.Abstract.IvCompanyTechnicalAgreementRepository,ELPS.Domain.Abstract.IvCompanyFileRepository,ELPS.Domain.Abstract.IDocument_TypeRepository,ELPS.Domain.Abstract.IFacilityDocumentRepository,ELPS.Domain.Abstract.IFacilityRepository,ELPS.Domain.Abstract.IvAffiliateRepository)">
            <summary>
            
            </summary>
            <param name="compRep"></param>
            <param name="appIdRep"></param>
            <param name="nsitfRep"></param>
            <param name="medRep"></param>
            <param name="profRep"></param>
            <param name="techAgreeRep"></param>
            <param name="expQuoatRep"></param>
            <param name="fileRep"></param>
            <param name="compDocRep"></param>
            <param name="vCoyDirRep"></param>
            <param name="vCoyExpRep"></param>
            <param name="vCoyMedRep"></param>
            <param name="vCoyNsitfRep"></param>
            <param name="vCoyProRep"></param>
            <param name="vCoyTechRep"></param>
            <param name="vCoyFileRep"></param>
            <param name="docTypeRep"></param>
            <param name="facDocRep"></param>
            <param name="facRep"></param>
            <param name="facFileRep"></param>
            <param name="vAffiliateRep"></param>
            <param name="affRep"></param>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.GetCompany(System.Int32,System.String,System.String)">
            <summary>
            Get a company detail by Id
            </summary>
            <param name="id"></param>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(License) secrete Key</param>
            <returns>Returns a Company Model. </returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.GetCompany(System.String,System.String,System.String)">
            <summary>
            Get a company detail by Company's email
            </summary>
            <param name="compemail">Company email</param>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(License) secrete Key</param>
            <returns>Returns a Company Model. </returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.GetCompanyFull(System.String,System.String,System.String)">
            <summary>
            Gets a Company's Full model, this will include all Company Expatriate Quotas, Company Medicals, Company Nsitfs, Company Proffessionals, Company Technical Agreements
            </summary>
            <param name="compemail">Company email</param>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(License) secrete Key</param>
            <returns>company Details and all Company Expatriate Quotas, Company Medicals, Company Nsitfs, Company Proffessionals, Company Technical Agreements</returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.CreateCompany(System.String,System.String,ELPS.Domain.Entities.Company)">
            <summary>
            Post  a Copany Model to create a new Company
            </summary>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(License) secrete Key</param>
            <param name="comp">Company Model to be added</param>
            <returns>Returns the Added Company model</returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.PutCompany(System.String,System.String,ELPS.Models.CompanyModel)">
            <summary>
            Update a Company and its Components 
            </summary>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(License) secrete Key</param>
            <param name="companyModel">Company Detail with Company Expatriate Quotas, Company Medicals, Company Nsitfs, Company Proffessionals and Company Technical Agreements </param>
            <returns>company Details and all Company Expatriate Quotas, Company Medicals, Company Nsitfs, Company Proffessionals, Company Technical Agreements</returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.GetCompanyDocuments(System.Int32,System.String,System.String)">
            <summary>
            Get company Documents
            </summary>
            <param name="id">Company Id</param>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(License) secrete Key</param>
            <returns>Returns a list of company's Document</returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.GetParentCompanyDocuments(System.Int32,System.String,System.String)">
            <summary>
            Get Parent company Documents
            </summary>
            <param name="id">Company Id</param>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(License) secrete Key</param>
            <returns>Returns a list of company's Document</returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.GetCompanyDocument(System.Int32,System.String,System.String)">
            <summary>
            get Company Document by Id
            </summary>
            <param name="id">Document Id</param>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(License) secrete Key</param>
            <returns>Returns a Company's Document</returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.GetDocumentTypes(System.String,System.String)">
            <summary>
            get Document types
            </summary>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(License) secrete Key</param>
            <returns>Returns all Document types</returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.PostUploadFile">
            <summary>
            Posting Files (Save HttpPostedFileBase and return the File Id)
            </summary>
            <returns>returns the FileId and the Name</returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.PostUpdateFile(System.Int32,System.Int32,System.String)">
            <summary>
            Posting Files (Save HttpPostedFileBase) to Update annd replace Company document
            </summary>
            <param name="docid">Document Id</param>
            <param name="compid">Company Id</param>
            <param name="docfor">Document is either Company or Facility</param>
            <returns>Returns the FileId , the Name and the Source(file URL) </returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.PutUpdateDocument(System.Int32,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            Update Company Document
            </summary>
            <param name="id">Document Id</param>
            <param name="compid">Company Id</param>
            <param name="status">Document Status: Rejected or Not</param>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(License) secrete Key</param>
            <returns>Returns the Updated company Document model</returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.PostUploadCompanyDoc(System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Posting Files (Save HttpPostedFileBase )for a Company document type
            </summary>
            <param name="docTypeId">Document Type Id</param>
            <param name="compId">Company Id</param>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(License) secrete Key</param>
            <param name="docName">(Optional)Document Name in the Case of Other Document that is not defined in the Official Document Types</param>
            <param name="uniqueid">(Optional)Unique Id for DocName in the Case of Other Document that is not defined in the Official Document Types</param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.DeleteUploadCompanyDoc(System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="id">Company Document Id</param>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(License) secrete Key</param>
            <returns>returns 1 if successful and 0 if not</returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.PostUploadFacilityDoc(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Posting Files (Save HttpPostedFileBase )for a Company's Facility document type
            </summary>
            <param name="docTypeId">Document Type Id</param>
            <param name="compId">Company Id</param>
            <param name="facId"></param>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(License) secrete Key</param>
            <param name="docName">(Optional)Document Name in the Case of Other Document that is not defined in the Official Document Types</param>
            <param name="uniqueid">(Optional)Unique Id for DocName in the Case of Other Document that is not defined in the Official Document Types</param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.PostUpdateFacilityFile(System.Int32,System.Int32)">
            <summary>
            Posting Files (Save HttpPostedFileBase) to Update annd replace Company document
            </summary>
            <param name="docid">Document Id</param>
            <param name="facid">Company Id</param>
            <returns>Returns the FileId , the Name and the Source(file URL) </returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.GetDocumentTypes(System.String,System.String,System.String)">
            <summary>
            Get All Facility Document types
            </summary>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(License) secrete Key</param>
            <param name="Type">Document Type</param>
            <returns>Returns all Document types</returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.GetFacilityDocument(System.Int32,System.String,System.String)">
            <summary>
            Get Facility Documents by FacilityId
            </summary>
            <param name="id">Facility Id</param>
            <param name="email">the Application(License) Email</param>
            <param name="apiHash">this is SHA512 hash of email and Application(License) secrete Key</param>
            <returns>Returns a Company's Document</returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.GetFacilityFiles(System.Int32,System.String,System.String)">
            <summary>
            Get Facility Files by FacilityId
            </summary>
            <param name="id">Facility ID</param>
            <param name="email"></param>
            <param name="apiHash"></param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.PostAddFacility(System.String,System.String,ELPS.Domain.Entities.Facility)">
            <summary>
            Add new Company Facility
            </summary>
            <param name="email"></param>
            <param name="apiHash"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.CompaniesController.DeleteFacilityDocument(System.Int32,System.String,System.String)">
            <summary>
            Delete a Facility Document
            </summary>
            <param name="id">Document ID</param>
            <param name="email"></param>
            <param name="apiHash"></param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.CompanyController.CompanyDetails(System.Int32,System.String,System.String)">
            <summary>
            Called be external portal
            </summary>
            <param name="id"></param>
            <param name="email"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.LicensesController.GetCheckLicense(System.String)">
            <summary>
            Get License Validity
            </summary>
        </member>
        <member name="M:ELPS.Controllers.FacilitiesController.PostFacility(System.String,System.String,System.String)">
            <summary>
            Get Facility Information
            </summary>
            <param name="email"></param>
            <param name="code"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.FacilitiesController.PutFacility(System.String,System.String,ELPS.Domain.Entities.Facility)">
            <summary>
            Updating Facility information especially for Take Over in ROMS
            </summary>
            <param name="email"></param>
            <param name="code"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.CompanyDocumentController.UploadDocument(System.String)">
            <summary>
            Upload Company document
            </summary>
            <param name="id">Application Reference</param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.PaymentController.Remita(System.String,System.String,System.String,System.String)">
            <summary>
            Callback URL for Remita after any transaction
            </summary>
            <param name="status"></param>
            <param name="statuscode"></param>
            <param name="RRR"></param>
            <param name="orderId"></param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.PaymentController.GiveRemitaValue(System.String,System.String,System.String)">
            <summary>
            Called from Child Portal to give value to a specific application
            </summary>
            <param name="reference"></param>
            <param name="email"></param>
            <param name="apiHash"></param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.PaymentController.RemitaPay(System.Collections.Generic.List{ELPS.Domain.Entities.RemitaPaymentStatus})">
            <summary>
            Bounced to for BANK Payments from Child portal
            </summary>
            <param name="model"></param>
            <returns>List of Payment Responses from Remita</returns>
        </member>
        <member name="M:ELPS.Controllers.PaymentController.CheckIfPaid(System.String)">
            <summary>
            Check Payment status directly from Remita
            </summary>
            <param name="id">Reference number (12 digit) or RRR</param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.PaymentsController.Payments(System.Int32,System.String,System.String,ELPS.Models.PaymentSplit)">
            <summary>
            Prepares a License Payment by getting RRR from remita
            </summary>
            <param name="CompId">Company Id</param>
            <param name="email">API Email</param>
            <param name="apiHash">API Hash</param>
            <param name="Split">Payment Splitting</param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.PaymentsController.ExtraPayment(System.Int32,System.String,System.String,ELPS.Models.RemitaPaymentModel)">
            <summary>
            
            </summary>
            <param name="CompId"></param>
            <param name="email"></param>
            <param name="apiHash"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.PaymentsController.GetStatus(System.String,System.String,System.String)">
            <summary>
            Get the Remita Status of an Application 
            </summary>
            <param name="email">API Email</param>
            <param name="apiHash">API Hash</param>
            <param name="orderId">12 Digit Application Reference Number</param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.PaymentsController.GetReceipts(System.String,System.String,System.String,System.String)">
            <summary>
            Get List of Receipts within a specified time range
            </summary>
            <param name="startDate">Start Date to begin search from (mm-dd-yyy format)</param>
            <param name="endDate">End Date to end search on (mm-dd-yyy format)</param>
            <param name="email"></param>
            <param name="apiHash"></param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.PaymentsController.PostBank(System.String,System.String,System.String,System.String,ELPS.Models.PaymentSplit)">
            <summary>
            
            </summary>
            <param name="refno"></param>
            <param name="em"></param>
            <param name="email"></param>
            <param name="apiHash"></param>
            <param name="Split"></param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.PermitsController.GetExternalLookup(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="licenseNo"></param>
            <param name="pk"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Controllers.ReportsController.GetCategoryList(System.Collections.Generic.List{ELPS.Domain.Entities.vApplication},System.String)">
            <summary>
                Returns the List of Licenses or Categories in a Group of Applications
            </summary>
            <param name="list"></param>
            <returns></returns>
            
        </member>
        <member name="M:ELPS.Helpers.FileHelper.UploadCompDoc(System.Web.HttpPostedFile,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Uploads a new Company Document
            </summary>
            <param name="file">Document file to save</param>
            <param name="docTypeId">Document Type Id</param>
            <param name="compId">Id of the company to upload document for</param>
            <param name="userName"></param>
            <param name="Ip"></param>
            <param name="docName">(Optional)For extra doxument under "Other Document" type</param>
            <param name="uniqueid">(Optional) Unique  </param>
            <returns>Returns the Document Id</returns>
        </member>
        <member name="M:ELPS.Helpers.FileHelper.UpdateCompDoc(System.Web.HttpPostedFile,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Updates Company/Facility Document
            </summary>
            <param name="file"></param>
            <param name="docId"></param>
            <param name="compId"></param>
            <param name="userName"></param>
            <param name="Ip"></param>
            <param name="docName"></param>
            <returns></returns>
        </member>
        <member name="M:ELPS.Helpers.FileHelper.UploadFacilityDoc(System.Web.HttpPostedFile,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Uploads a new facility Document for aCompany
            </summary>
            <param name="file">Document file to save</param>
            <param name="docTypeId">Document Type Id</param>
            <param name="compId">Id of the company that owns the Facility</param>
            <param name="facilityId">Id of the facility to upload document for</param>
            <param name="userName"></param>
            <param name="Ip"></param>
            <param name="docName">(Optional)For extra doxument under "Other Document" type</param>
            <param name="uniqueid">(Optional) Unique  </param>
            <returns>Returns the Document Id</returns>
            
        </member>
        <member name="M:ELPS.Helpers.FileHelper.UpdateFacilityDoc(System.Web.HttpPostedFile,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Updates Company/Facility Document
            </summary>
            <param name="file"></param>
            <param name="docId"></param>
            <param name="facId"></param>
            <param name="compId"></param>
            <param name="userName"></param>
            <param name="Ip"></param>
            <param name="docName"></param>
            <returns></returns>
        </member>
        <member name="P:ELPS.Helpers.JQueryDataTableParamModel.sEcho">
            <summary>
            Request sequence number sent by DataTable,
            same value must be returned in response
            </summary>       
        </member>
        <member name="P:ELPS.Helpers.JQueryDataTableParamModel.sSearch">
            <summary>
            Text used for filtering
            </summary>
        </member>
        <member name="P:ELPS.Helpers.JQueryDataTableParamModel.iDisplayLength">
            <summary>
            Number of records that should be shown in table
            </summary>
        </member>
        <member name="P:ELPS.Helpers.JQueryDataTableParamModel.iDisplayStart">
            <summary>
            First record that should be shown(used for paging)
            </summary>
        </member>
        <member name="P:ELPS.Helpers.JQueryDataTableParamModel.iColumns">
            <summary>
            Number of columns in table
            </summary>
        </member>
        <member name="P:ELPS.Helpers.JQueryDataTableParamModel.iSortingCols">
            <summary>
            Number of columns that are used in sorting
            </summary>
        </member>
        <member name="P:ELPS.Helpers.JQueryDataTableParamModel.sColumns">
            <summary>
            Comma separated list of column names
            </summary>
        </member>
        <member name="M:ELPS.Helpers.UtilityHelper.LogPaymentTrack(System.String)">
            <summary>
            Logs Payment Crawlers report
            </summary>
            <param name="message">Build up message</param>
        </member>
        <member name="T:ELPS.Models.FacilityVM">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
